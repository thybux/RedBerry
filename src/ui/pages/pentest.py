from PySide6.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QLabel,
    QLineEdit,
    QPushButton,
    QTextEdit,
    QMessageBox,
    QProgressBar,
    QMainWindow,
)
from PySide6.QtCore import Qt, QThread, Signal
from PySide6.QtGui import QFont
from controllers.scanner import Scanner
from utils.parser import NmapParser
import re

class ScanThread(QThread):
    finished = Signal(dict)
    error = Signal(str)

    def __init__(self, parser, target, options):
        super().__init__()
        self.parser = parser
        self.target = target
        self.options = options

    def run(self):
        try:
            results = self.parser.scan_to_json(self.target, self.options)
            self.finished.emit(results)
        except Exception as e:
            self.error.emit(str(e))

class Pentest(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)

        self.scanner = Scanner()
        self.parser = NmapParser()
        self.scan_thread = None

        layout = QVBoxLayout()

        self.target_label = QLabel("Cible (IP ou domaine) :")
        self.target_input = QLineEdit()
        self.target_input.setText("127.0.0.1")
        layout.addWidget(self.target_label)
        layout.addWidget(self.target_input)

        self.options_label = QLabel("Options Nmap (par défaut : -sV -p-) :")
        self.options_input = QLineEdit()
        self.options_input.setText("-sV -p 3000-6000")
        layout.addWidget(self.options_label)
        layout.addWidget(self.options_input)

        self.scan_button = QPushButton("Lancer le scan")
        self.scan_button.clicked.connect(self.run_scan)
        layout.addWidget(self.scan_button)

        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)

        self.result_output = QTextEdit()
        self.result_output.setReadOnly(True)
        self.result_output.setFont(QFont("Courier"))
        layout.addWidget(self.result_output)

        self.setLayout(layout)

    def validate_target(self, target):
        """Valide l'adresse IP ou le nom de domaine"""
        ip_pattern = r'^(\d{1,3}\.){3}\d{1,3}$'
        domain_pattern = r'^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$'
        
        return bool(re.match(ip_pattern, target) or re.match(domain_pattern, target))

    def run_scan(self):
        target = self.target_input.text().strip()
        options = self.options_input.text().strip()

        if not target:
            QMessageBox.warning(self, "Erreur", "Veuillez entrer une cible valide.")
            return
            
        if not self.validate_target(target):
            QMessageBox.warning(self, "Erreur", "Format de cible invalide.")
            return

        self.scan_button.setEnabled(False)
        self.target_input.setEnabled(False)
        self.options_input.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)
        
        self.result_output.clear()
        self.result_output.append(f"Lancement du scan sur {target} avec les options {options}...\n")

        self.scan_thread = ScanThread(self.parser, target, options)
        self.scan_thread.finished.connect(self.on_scan_finished)
        self.scan_thread.error.connect(self.on_scan_error)
        self.scan_thread.start()

    def on_scan_finished(self, results):
        try:
            formatted_results = self.parser.format_results(results)
            self.result_output.append(formatted_results)
            
            # Vérifie s'il y a des services actifs
            scan_data = results.get('scan', {})
            active_services = {}
            
            for host_data in scan_data.values():
                if 'tcp' in host_data:
                    for port, service_info in host_data['tcp'].items():
                        if service_info['state'] == 'open':
                            active_services[port] = service_info

            # Si des services sont trouvés, met à jour la page searchsploit et navigue
            if active_services:
                main_window = None
                parent = self.parent()
                while parent is not None:
                    if isinstance(parent, QMainWindow):
                        main_window = parent
                        break
                    parent = parent.parent()

                if main_window and hasattr(main_window, 'pages'):
                    # Met à jour les services dans la page Searchsploit existante
                    searchsploit_page = main_window.pages['Searchsploit']['widget']
                    searchsploit_page.set_services(active_services)
                    
                    # Navigation vers la page
                    main_window.navigate_to('Searchsploit')
                else:
                    print("MainWindow non trouvée ou pas de pages")
            
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur lors du formatage des résultats : {str(e)}")
            print(f"Exception détaillée : {str(e)}")
        finally:
            self.cleanup_scan()

    def on_scan_error(self, error_message):
        QMessageBox.critical(self, "Erreur", f"Une erreur est survenue : {error_message}")
        self.cleanup_scan()

    def cleanup_scan(self):
        self.scan_button.setEnabled(True)
        self.target_input.setEnabled(True)
        self.options_input.setEnabled(True)
        self.progress_bar.setVisible(False)
        
        if self.scan_thread:
            self.scan_thread.quit()
            self.scan_thread.wait()
            self.scan_thread = None

