#include "pentest.h"
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QLabel>
#include <QPushButton>
#include <QGroupBox>
#include <QFormLayout>
#include <QMessageBox>

Pentest::Pentest(QWidget *parent) : QWidget(parent), m_nmapProcess(new QProcess(this))
{
    QVBoxLayout *mainLayout = new QVBoxLayout(this);

    // Groupe de configuration
    QGroupBox *configGroup = new QGroupBox("Configuration du scan", this);
    QFormLayout *configLayout = new QFormLayout;

    // Configuration de la cible
    m_targetInput = new QLineEdit(this);
    configLayout->addRow("IP/Hostname cible:", m_targetInput);

    // Type de scan
    m_scanTypeCombo = new QComboBox(this);
    m_scanTypeCombo->addItems({
        "Scan rapide (-T4 -F)",
        "Scan complet",
        "Scan furtif (-sS)",
        "Scan UDP (-sU)",
        "Scan avec scripts (-sC)"
    });
    configLayout->addRow("Type de scan:", m_scanTypeCombo);

    // Configuration des ports
    m_portRangeInput = new QLineEdit("1-1000", this);
    configLayout->addRow("Ports à scanner:", m_portRangeInput);

    configGroup->setLayout(configLayout);
    mainLayout->addWidget(configGroup);

    // Bouton pour lancer le scan
    QPushButton *scanButton = new QPushButton("Lancer le scan NMAP", this);
    mainLayout->addWidget(scanButton);

    // Zone d'affichage des résultats
    m_outputDisplay = new QTextEdit(this);
    m_outputDisplay->setReadOnly(true);
    mainLayout->addWidget(m_outputDisplay);

    // Bouton retour
    QPushButton *backButton = new QPushButton("Retour à l'accueil", this);
    mainLayout->addWidget(backButton);

    // Connexions des signaux
    connect(scanButton, &QPushButton::clicked, this, &Pentest::runNmapScan);
    connect(backButton, &QPushButton::clicked, [this]() {
        emit requestNavigateToPage("Home");
    });
    connect(m_nmapProcess, &QProcess::readyReadStandardOutput, this, &Pentest::handleScanOutput);
    connect(m_nmapProcess, &QProcess::readyReadStandardError, this, &Pentest::handleScanError);
    connect(m_nmapProcess, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
            this, &Pentest::scanFinished);
}

QString Pentest::buildNmapCommand()
{
    QStringList args;
    args << m_targetInput->text();

    // Configuration du type de scan
    switch (m_scanTypeCombo->currentIndex()) {
        case 0: args << "-T4" << "-F"; break;
        case 2: args << "-sS"; break;
        case 3: args << "-sU"; break;
        case 4: args << "-sC"; break;
    }

    // Configuration des ports
    if (!m_portRangeInput->text().isEmpty()) {
        args << "-p" << m_portRangeInput->text();
    }

    return "nmap " + args.join(" ");
}

void Pentest::runNmapScan()
{
    if (m_targetInput->text().isEmpty()) {
        QMessageBox::warning(this, "Erreur", "Veuillez spécifier une cible");
        return;
    }

    m_outputDisplay->clear();
    m_outputDisplay->append("Démarrage du scan...\n");
    m_outputDisplay->append("Commande: " + buildNmapCommand() + "\n");

    QStringList args;
    args << "-v" << m_targetInput->text();
    
    // Ajout des options selon le type de scan
    switch (m_scanTypeCombo->currentIndex()) {
        case 0: args << "-T4" << "-F"; break;
        case 2: args << "-sS"; break;
        case 3: args << "-sU"; break;
        case 4: args << "-sC"; break;
    }

    // Ajout de la plage de ports si spécifiée
    if (!m_portRangeInput->text().isEmpty()) {
        args << "-p" << m_portRangeInput->text();
    }

    m_nmapProcess->start("nmap", args);
}

void Pentest::handleScanOutput()
{
    QString output = QString::fromLocal8Bit(m_nmapProcess->readAllStandardOutput());
    m_outputDisplay->append(output);
}

void Pentest::handleScanError()
{
    QString error = QString::fromLocal8Bit(m_nmapProcess->readAllStandardError());
    m_outputDisplay->append("ERREUR: " + error);
}

void Pentest::scanFinished(int exitCode, QProcess::ExitStatus exitStatus)
{
    if (exitStatus == QProcess::NormalExit && exitCode == 0) {
        m_outputDisplay->append("\nScan terminé avec succès");
    } else {
        m_outputDisplay->append("\nLe scan a échoué avec le code: " + QString::number(exitCode));
    }
}